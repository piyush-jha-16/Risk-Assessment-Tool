def vulnerability_assessment(target_ip):
    """
    Performs basic security vulnerability assessment.
    
    Features:
    - Checks for common vulnerable services
    - Analyzes web server information
    - Identifies potential security risks
    - Provides remediation recommendations
    
    Parameters:
    - target_ip: IP address to assess
    
    Returns:
    - List of identified vulnerabilities
    """
    print(Fore.CYAN + f"\nPerforming basic vulnerability assessment on {target_ip}...")
    
    vulnerabilities = []
    
    # Common vulnerable services and their risks
    vulnerable_ports = {
        21: "FTP - Potential anonymous login or weak authentication",
        23: "Telnet - Unencrypted communication vulnerability",
        80: "HTTP - Potential web application vulnerabilities",
        443: "HTTPS - Check for SSL/TLS misconfigurations",
        3389: "RDP - Potential brute force or BlueKeep vulnerability",
        5900: "VNC - Unencrypted remote access vulnerability",
        1433: "MSSQL - Database exposure risk",
        5432: "PostgreSQL - Database exposure risk"
    }
    
    loading_animation("Checking for common vulnerabilities")
    
    # Check for vulnerable services
    for port, description in vulnerable_ports.items():
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((target_ip, port))
            if result == 0:
                vulnerabilities.append((port, description))
                print(Fore.RED + f"⚠️  VULNERABLE: Port {port} - {description}")
            sock.close()
        except:
            pass
    
    # Web server information disclosure check
    web_vulnerabilities = check_web_vulnerabilities(target_ip)
    vulnerabilities.extend(web_vulnerabilities)
    
    return vulnerabilities

def check_web_vulnerabilities(target_ip):
    """
    Checks for web-specific vulnerabilities and information disclosure.
    
    Parameters:
    - target_ip: Target IP address
    
    Returns:
    - List of web-related vulnerabilities
    """
    web_vulns = []
    
    try:
        # Check HTTP
        response = requests.get(f"http://{target_ip}", timeout=5)
        server_header = response.headers.get('Server', 'Not disclosed')
        
        print(Fore.YELLOW + f"Web Server Banner: {server_header}")
        
        # Check for information disclosure
        if server_header != 'Not disclosed':
            web_vulns.append(("HTTP", f"Server information disclosed: {server_header}"))
            
        # Check for common security headers
        security_headers = ['X-Frame-Options', 'X-Content-Type-Options', 
                           'Strict-Transport-Security', 'Content-Security-Policy']
        
        missing_headers = []
        for header in security_headers:
            if header not in response.headers:
                missing_headers.append(header)
        
        if missing_headers:
            web_vulns.append(("HTTP", f"Missing security headers: {', '.join(missing_headers)}"))
            
    except requests.exceptions.RequestException:
        pass  # HTTP service not available
    
    return web_vulns